#Project Setting
option(ENABLE_MPI "Enable MPI parallelization" ON)
set(MPI_NO_SYSTEM_PATHS ON) 
find_package(MPI)
if(MPI_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MPI_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MPI_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_EXE_LINKER_FLAGS}")
    include_directories(${MPI_C_HEADER_DIR})
    MESSAGE( STATUS "MPI_C_HEADER_DIR = ${MPI_C_HEADER_DIR}") 
    include_directories(${MPI_C_ADDITIONAL_INCLUDE_DIRS})
    MESSAGE( STATUS "MPI_C_ADDITIONAL_INCLUDE_DIRS = ${MPI_C_ADDITIONAL_INCLUDE_DIRS}") 
    MESSAGE( "MPI setting successfully")
else()
    MESSAGE( "MPI setting faild")
endif()

set(Boost_NO_SYSTEM_PATHS ON) 
#set(BOOST_ROOT "E:/user/boost_1_82_0/boost_1_82_0/buildup")
find_package(Boost)
if(Boost_FOUND)
	#add_compile_definitions(__REF_BOOST)
    include_directories(${Boost_INCLUDE_DIR})
    MESSAGE( STATUS "Boost_INCLUDE_DIR = ${Boost_INCLUDE_DIR}.")
    MESSAGE( STATUS "Boost_LIB_VERSION = ${Boost_LIB_VERSION}.")
    message("Boost setting successfully")
else()
    set(Boost_Preset_Dir "E:/boost_1_85_0/out/build")
    if( EXISTS Boost_Preset_Dir )
    	#add_compile_definitions(__REF_BOOST)
        set(Boost_INCLUDE_DIR "E:/boost_1_85_0/out/build/include/boost-1_85/boost")
        include_directories(${Boost_INCLUDE_DIR})
        target_link_libraries(LightDiagram "E:/boost_1_85_0/out/build/lib")
        MESSAGE( STATUS "Boost_INCLUDE_DIR = ${Boost_INCLUDE_DIR}.")
        MESSAGE( STATUS "Boost_LIB_VERSION = ${Boost_LIB_VERSION}.")
        message("Boost setting successfully")
    else()
        message("Boost setting failed and ${Boost_Preset_Dir} not find")
    endif()
endif()

include_directories     ("${PROJECT_BINARY_DIR}"                    "${PROJECT_BINARY_DIR}/Utility")
include_directories     ("${PROJECT_BINARY_DIR}/Core/Header"        "${PROJECT_BINARY_DIR}/Core")
include_directories     ("${PROJECT_BINARY_DIR}/Extension/Header"   "${PROJECT_BINARY_DIR}/Extension")
aux_source_directory    (. Main_Cpp_List)
aux_source_directory    (./Core Core_Cpp_List)
aux_source_directory    (./Extension Extension_Cpp_List)
message( STATUS "main part cpp = ${Main_Cpp_List}")
message( STATUS "core part cpp = ${Core_Cpp_List}")
message( STATUS "extension part cpp = ${Extension_Cpp_List}")
add_library (LightDiagram ${Main_Cpp_List} ${Core_Cpp_List} ${Extension_Cpp_List} ${Utility_Cpp_List})

if(MPI_FOUND)
    target_link_libraries(LightDiagram ${MPI_C_LIBRARIES})
    set_property(TARGET LightDiagram PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    message( STATUS "MPI_C_LIBRARIES = ${MPI_C_LIBRARIES}")
endif()

if(Boost_FOUND)
    target_link_libraries (LightDiagram ${Boost_LIBRARIES})
    message( STATUS "Boost_LIBRARIES = ${Boost_LIBRARIES}")
endif()

if (CMAKE_VERSION VERSION_GREATER 3.12)
  set_property(TARGET LightDiagram PROPERTY CXX_STANDARD 17)
endif()

#install(TARGETS LightDiagram)
#install(TARGETS ${head_files} DESTINATION  ${CMAKE_BINARY_DIR}/Lib)
install(TARGETS LightDiagram 
        RUNTIME DESTINATION ${Install_Path}/bin
        LIBRARY DESTINATION ${Install_Path}/lib
        ARCHIVE DESTINATION ${Install_Path}/lib/static)